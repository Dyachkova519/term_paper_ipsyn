{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import re\n",
    "import csv\n",
    "from pymystem3 import Mystem\n",
    "m = Mystem()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "['T105new.cha', 'T106new.cha', 'T154new.cha', 'T156new.cha', 'T183new.cha', 'T229new.cha']\n"
     ]
    }
   ],
   "source": [
    "agedict = {'T80': 20, 'T81': 20, 'T105': 22, 'T106': 22, 'T139': 24,'T154': 26, 'T156': 26,'T183': 28, 'T210': 30, 'T229': 32, 'Ya8': 20, 'Ya11': 22, 'Ya13': 24, 'Ya16': 26, 'Ya22': 28, 'Ya27': 30, 'Ya32': 32, 'L108': 20, 'L110': 22, 'L200': 24, 'L202': 26, 'L204': 28, 'L206': 30, 'L208': 32, 'vl108': 20, 'vl110': 22, 'vl200': 24, 'vl202': 26, 'vl204': 28, 'vl206': 30, 'vl208': 32, 'vi200': 24, 'vi202': 26, 'vi204': 28, 'vi206': 30, 'vi208': 32, 'rl108': 20, 'rl110': 22, 'rl200': 24, 'rl206': 30, 'rl208': 32}\n",
    "\n",
    "files_li = os.listdir(r'DIRECTORY')#folder with .cha files\n",
    "\n",
    "files = []\n",
    "\n",
    "for i in files_li:\n",
    "    if i.endswith('.cha'):\n",
    "        files.append(i)\n",
    "\n",
    "\n",
    "def get_id(filename):\n",
    "    id = re.findall(r'([a-zA-Z]+)\\d+new.cha', filename)[0]\n",
    "    return id\n",
    "\n",
    "\n",
    "def get_age(filename):\n",
    "    d = re.findall(r'(\\w+\\d+)new.cha', filename)[0]\n",
    "    age = agedict[d]\n",
    "    return age"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [],
   "source": [
    "def cleanstring(string):\n",
    "    if string.startswith('*CHI') or string.startswith('*CHX'):\n",
    "            #print(li)\n",
    "                    cleanli = string[6:]\n",
    "                    no_spaces_in_bra = re.sub(r':{1,2} ', r'', cleanli)\n",
    "                    no_coms = re.sub(r'@.+ ', r' ', no_spaces_in_bra)\n",
    "                    no_punct = ''\n",
    "                    if '[' in no_coms:\n",
    "                        word_list = no_coms.split()\n",
    "                        for word in word_list:\n",
    "                            if word.startswith('['):\n",
    "                                num = word_list.index(word)\n",
    "                                del word_list[num - 1]\n",
    "                        word_list = word_list[:-1]\n",
    "                        no_coms = ' '.join(word_list)\n",
    "                    else:\n",
    "                        coml = no_coms.split()[:-1]\n",
    "                        no_coms = ' '.join(coml)\n",
    "                    for symb in no_coms:\n",
    "                        if symb not in '.,;:?!()[]*':\n",
    "                            no_punct += symb\n",
    "                    return no_punct"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [],
   "source": [
    "for chaf in files:\n",
    "    kidid = get_id(chaf)\n",
    "    kidage = get_age(chaf)\n",
    "    kidreplname = r'DIRECTORY_REPL' + kidid + str(kidage) + 'repl.csv'#new folder for files with repliques\n",
    "    sf = open(chaf, 'r', encoding='utf-8')\n",
    "    if os.path.exists(kidreplname) == True:\n",
    "        kf = open(kidreplname, 'a', encoding='utf-8')\n",
    "        file_writer = csv.writer(kf, delimiter = \"\\t\", lineterminator=\"\\r\")\n",
    "        #file_writer.writerow([\"Child_ID\", \"Age (month)\", \"Rerl\"])\n",
    "        for l in sf:\n",
    "            if l.startswith('*CHI') or l.startswith('*CHX'):\n",
    "                clli = cleanstring(l)\n",
    "                if clli != ' ':\n",
    "                    file_writer.writerow([kidid, kidage, clli])\n",
    "        kf.close()\n",
    "    else:\n",
    "        nkf = open(kidreplname, 'w', encoding='utf-8')\n",
    "        file_writer = csv.writer(nkf, delimiter = \"\\t\", lineterminator=\"\\r\")\n",
    "        file_writer.writerow([\"Child_ID\", \"Age (month)\", \"Repl\"])\n",
    "        for ll in sf:\n",
    "            if ll.startswith('*CHI') or ll.startswith('*CHX'):\n",
    "                cll = cleanstring(ll)\n",
    "                if cll != ' ':\n",
    "                    file_writer.writerow([kidid, kidage, cll])\n",
    "        nkf.close()\n",
    "    sf.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyboardInterrupt",
     "evalue": "",
     "output_type": "error",
     "traceback": [
      "\u001b[1;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m                         Traceback (most recent call last)",
      "\u001b[1;32mc:\\Users\\Маша\\Desktop\\курсач номер три жесть\\ips code\\course jup.ipynb Cell 7\u001b[0m in \u001b[0;36m<cell line: 2>\u001b[1;34m()\u001b[0m\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/%D0%9C%D0%B0%D1%88%D0%B0/Desktop/%D0%BA%D1%83%D1%80%D1%81%D0%B0%D1%87%20%D0%BD%D0%BE%D0%BC%D0%B5%D1%80%20%D1%82%D1%80%D0%B8%20%D0%B6%D0%B5%D1%81%D1%82%D1%8C/ips%20code/course%20jup.ipynb#W6sZmlsZQ%3D%3D?line=15'>16</a>\u001b[0m words \u001b[39m=\u001b[39m repl\u001b[39m.\u001b[39msplit()\u001b[39m#[:-1]\u001b[39;00m\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/%D0%9C%D0%B0%D1%88%D0%B0/Desktop/%D0%BA%D1%83%D1%80%D1%81%D0%B0%D1%87%20%D0%BD%D0%BE%D0%BC%D0%B5%D1%80%20%D1%82%D1%80%D0%B8%20%D0%B6%D0%B5%D1%81%D1%82%D1%8C/ips%20code/course%20jup.ipynb#W6sZmlsZQ%3D%3D?line=16'>17</a>\u001b[0m \u001b[39mfor\u001b[39;00m word \u001b[39min\u001b[39;00m words:\n\u001b[1;32m---> <a href='vscode-notebook-cell:/c%3A/Users/%D0%9C%D0%B0%D1%88%D0%B0/Desktop/%D0%BA%D1%83%D1%80%D1%81%D0%B0%D1%87%20%D0%BD%D0%BE%D0%BC%D0%B5%D1%80%20%D1%82%D1%80%D0%B8%20%D0%B6%D0%B5%D1%81%D1%82%D1%8C/ips%20code/course%20jup.ipynb#W6sZmlsZQ%3D%3D?line=17'>18</a>\u001b[0m     an \u001b[39m=\u001b[39m m\u001b[39m.\u001b[39;49manalyze(word)\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/%D0%9C%D0%B0%D1%88%D0%B0/Desktop/%D0%BA%D1%83%D1%80%D1%81%D0%B0%D1%87%20%D0%BD%D0%BE%D0%BC%D0%B5%D1%80%20%D1%82%D1%80%D0%B8%20%D0%B6%D0%B5%D1%81%D1%82%D1%8C/ips%20code/course%20jup.ipynb#W6sZmlsZQ%3D%3D?line=18'>19</a>\u001b[0m     \u001b[39mfor\u001b[39;00m one \u001b[39min\u001b[39;00m an:\n\u001b[0;32m     <a href='vscode-notebook-cell:/c%3A/Users/%D0%9C%D0%B0%D1%88%D0%B0/Desktop/%D0%BA%D1%83%D1%80%D1%81%D0%B0%D1%87%20%D0%BD%D0%BE%D0%BC%D0%B5%D1%80%20%D1%82%D1%80%D0%B8%20%D0%B6%D0%B5%D1%81%D1%82%D1%8C/ips%20code/course%20jup.ipynb#W6sZmlsZQ%3D%3D?line=19'>20</a>\u001b[0m         \u001b[39mif\u001b[39;00m \u001b[39m'\u001b[39m\u001b[39manalysis\u001b[39m\u001b[39m'\u001b[39m \u001b[39min\u001b[39;00m one:\n",
      "File \u001b[1;32m~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\pymystem3\\mystem.py:250\u001b[0m, in \u001b[0;36mMystem.analyze\u001b[1;34m(self, text)\u001b[0m\n\u001b[0;32m    248\u001b[0m result \u001b[39m=\u001b[39m []\n\u001b[0;32m    249\u001b[0m \u001b[39mfor\u001b[39;00m line \u001b[39min\u001b[39;00m text\u001b[39m.\u001b[39msplitlines():\n\u001b[1;32m--> 250\u001b[0m     result\u001b[39m.\u001b[39mextend(\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_analyze_impl(line))\n\u001b[0;32m    251\u001b[0m \u001b[39mreturn\u001b[39;00m result\n",
      "File \u001b[1;32m~\\AppData\\Local\\Packages\\PythonSoftwareFoundation.Python.3.10_qbz5n2kfra8p0\\LocalCache\\local-packages\\Python310\\site-packages\\pymystem3\\mystem.py:313\u001b[0m, in \u001b[0;36mMystem._analyze_impl\u001b[1;34m(self, text)\u001b[0m\n\u001b[0;32m    310\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_procin\u001b[39m.\u001b[39mwrite(text)\n\u001b[0;32m    311\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_procin\u001b[39m.\u001b[39mwrite(_NL)\n\u001b[1;32m--> 313\u001b[0m out, _ \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_proc\u001b[39m.\u001b[39;49mcommunicate()\n\u001b[0;32m    314\u001b[0m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_proc \u001b[39m=\u001b[39m \u001b[39mNone\u001b[39;00m\n\u001b[0;32m    315\u001b[0m \u001b[39mtry\u001b[39;00m:\n\u001b[0;32m    316\u001b[0m     \u001b[39m#obj = json.loads(out)\u001b[39;00m\n",
      "File \u001b[1;32mC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\subprocess.py:1154\u001b[0m, in \u001b[0;36mPopen.communicate\u001b[1;34m(self, input, timeout)\u001b[0m\n\u001b[0;32m   1151\u001b[0m     endtime \u001b[39m=\u001b[39m \u001b[39mNone\u001b[39;00m\n\u001b[0;32m   1153\u001b[0m \u001b[39mtry\u001b[39;00m:\n\u001b[1;32m-> 1154\u001b[0m     stdout, stderr \u001b[39m=\u001b[39m \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_communicate(\u001b[39minput\u001b[39;49m, endtime, timeout)\n\u001b[0;32m   1155\u001b[0m \u001b[39mexcept\u001b[39;00m \u001b[39mKeyboardInterrupt\u001b[39;00m:\n\u001b[0;32m   1156\u001b[0m     \u001b[39m# https://bugs.python.org/issue25942\u001b[39;00m\n\u001b[0;32m   1157\u001b[0m     \u001b[39m# See the detailed comment in .wait().\u001b[39;00m\n\u001b[0;32m   1158\u001b[0m     \u001b[39mif\u001b[39;00m timeout \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n",
      "File \u001b[1;32mC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\subprocess.py:1544\u001b[0m, in \u001b[0;36mPopen._communicate\u001b[1;34m(self, input, endtime, orig_timeout)\u001b[0m\n\u001b[0;32m   1540\u001b[0m \u001b[39m# Wait for the reader threads, or time out.  If we time out, the\u001b[39;00m\n\u001b[0;32m   1541\u001b[0m \u001b[39m# threads remain reading and the fds left open in case the user\u001b[39;00m\n\u001b[0;32m   1542\u001b[0m \u001b[39m# calls communicate again.\u001b[39;00m\n\u001b[0;32m   1543\u001b[0m \u001b[39mif\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mstdout \u001b[39mis\u001b[39;00m \u001b[39mnot\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[1;32m-> 1544\u001b[0m     \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49mstdout_thread\u001b[39m.\u001b[39;49mjoin(\u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_remaining_time(endtime))\n\u001b[0;32m   1545\u001b[0m     \u001b[39mif\u001b[39;00m \u001b[39mself\u001b[39m\u001b[39m.\u001b[39mstdout_thread\u001b[39m.\u001b[39mis_alive():\n\u001b[0;32m   1546\u001b[0m         \u001b[39mraise\u001b[39;00m TimeoutExpired(\u001b[39mself\u001b[39m\u001b[39m.\u001b[39margs, orig_timeout)\n",
      "File \u001b[1;32mC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\threading.py:1096\u001b[0m, in \u001b[0;36mThread.join\u001b[1;34m(self, timeout)\u001b[0m\n\u001b[0;32m   1093\u001b[0m     \u001b[39mraise\u001b[39;00m \u001b[39mRuntimeError\u001b[39;00m(\u001b[39m\"\u001b[39m\u001b[39mcannot join current thread\u001b[39m\u001b[39m\"\u001b[39m)\n\u001b[0;32m   1095\u001b[0m \u001b[39mif\u001b[39;00m timeout \u001b[39mis\u001b[39;00m \u001b[39mNone\u001b[39;00m:\n\u001b[1;32m-> 1096\u001b[0m     \u001b[39mself\u001b[39;49m\u001b[39m.\u001b[39;49m_wait_for_tstate_lock()\n\u001b[0;32m   1097\u001b[0m \u001b[39melse\u001b[39;00m:\n\u001b[0;32m   1098\u001b[0m     \u001b[39m# the behavior of a negative timeout isn't documented, but\u001b[39;00m\n\u001b[0;32m   1099\u001b[0m     \u001b[39m# historically .join(timeout=x) for x<0 has acted as if timeout=0\u001b[39;00m\n\u001b[0;32m   1100\u001b[0m     \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_wait_for_tstate_lock(timeout\u001b[39m=\u001b[39m\u001b[39mmax\u001b[39m(timeout, \u001b[39m0\u001b[39m))\n",
      "File \u001b[1;32mC:\\Program Files\\WindowsApps\\PythonSoftwareFoundation.Python.3.10_3.10.3056.0_x64__qbz5n2kfra8p0\\lib\\threading.py:1116\u001b[0m, in \u001b[0;36mThread._wait_for_tstate_lock\u001b[1;34m(self, block, timeout)\u001b[0m\n\u001b[0;32m   1113\u001b[0m     \u001b[39mreturn\u001b[39;00m\n\u001b[0;32m   1115\u001b[0m \u001b[39mtry\u001b[39;00m:\n\u001b[1;32m-> 1116\u001b[0m     \u001b[39mif\u001b[39;00m lock\u001b[39m.\u001b[39;49macquire(block, timeout):\n\u001b[0;32m   1117\u001b[0m         lock\u001b[39m.\u001b[39mrelease()\n\u001b[0;32m   1118\u001b[0m         \u001b[39mself\u001b[39m\u001b[39m.\u001b[39m_stop()\n",
      "\u001b[1;31mKeyboardInterrupt\u001b[0m: "
     ]
    }
   ],
   "source": [
    "replsdir = os.listdir(r'DIRECTORY_REPL')\n",
    "for ref in replsdir:\n",
    "    ref1 = r'DIRECTORY_REPL' + ref\n",
    "    short = ref[:-8] + '_'\n",
    "    kidanname = r'DIRECTORY_WORDS' + short + 'analysis.csv'#new folder for word analysis\n",
    "    rf = open(ref1, 'r', encoding='utf-8')\n",
    "    file_reader = csv.DictReader(rf, delimiter = \"\\t\")\n",
    "    af = open(kidanname, 'w', encoding='utf-8')\n",
    "    file_writer = csv.writer(af, delimiter = \"\\t\", lineterminator=\"\\r\")\n",
    "    file_writer.writerow([\"Child_ID\", \"Age\", \"Repl\", \"Word\", \"POS\", \"Grammar\"])\n",
    "\n",
    "    for l in file_reader:\n",
    "        repl = l['Repl']\n",
    "        id = l['Child_ID']\n",
    "        age = l['Age (month)']\n",
    "        words = repl.split()#[:-1]\n",
    "        for word in words:\n",
    "            an = m.analyze(word)\n",
    "            for one in an:\n",
    "                if 'analysis' in one:\n",
    "                    if len(one['analysis']) != 0:\n",
    "                        grammar = one['analysis'][0]['gr']\n",
    "                        pos = grammar.split('=')[0].split(',')[0]\n",
    "                        file_writer.writerow([id, age, ' '.join(words), word, pos, grammar])\n",
    "    \n",
    "    rf.close()\n",
    "    af.close()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "for ref in replsdir:\n",
    "    ref1 = r'DIRECTORY_REPL' + ref\n",
    "    short = ref[:-8] + '_'\n",
    "    kidanname = r'DIRECTORY_REPLANALYSIS' + short + 'analysisreps.csv'#new folder for files with repliques analysis\n",
    "    rf = open(ref1, 'r', encoding='utf-8')\n",
    "    file_reader = csv.DictReader(rf, delimiter = \"\\t\")\n",
    "    af = open(kidanname, 'w', encoding='utf-8')\n",
    "    file_writer = csv.writer(af, delimiter = \"\\t\", lineterminator=\"\\r\")\n",
    "    file_writer.writerow([\"Child_ID\", \"Age\", \"Repl\", \"POS\", \"Grammar\"])\n",
    "    for line in file_reader:\n",
    "#for repl in list_of_repls:\n",
    "        repl = line['Repl']\n",
    "        id = line['Child_ID']\n",
    "        age = line['Age (month)']\n",
    "        ws = repl.split()#[:1]\n",
    "        crepl = ' '.join(ws)\n",
    "        ana = m.analyze(crepl)\n",
    "        gramlist = []\n",
    "        poslist = []\n",
    "        for ww in ana:\n",
    "            if 'analysis' in ww:\n",
    "                if len(ww['analysis']) != 0:\n",
    "                    grammar = ww['analysis'][0]['gr']\n",
    "                    pos = grammar.split('=')[0].split(',')[0]\n",
    "                    poslist.append(pos)\n",
    "                    gramlist.append(grammar)\n",
    "        file_writer.writerow([id, age, crepl, ' '.join(poslist), ' '.join(gramlist)])\n",
    "\n",
    "    rf.close()\n",
    "    af.close()\n",
    "\n",
    "    "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "49"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "final = r'FINAL_FILE'#file with final analysis\n",
    "f2 = open(final, 'w', encoding='utf-8')\n",
    "file_writer = csv.writer(f2, delimiter = \"\\t\", lineterminator=\"\\r\")\n",
    "file_writer.writerow([\"Child_ID\", \"Age\", \"Param_Num\", \"Param_name\", \"Score\", \"Examples\"])\n",
    "#file_writer.writerow([name, age, 1, \"Noun\", param1_score, param1_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "anfolder = os.listdir(r'DIRECTORY_WORDS')\n",
    "\n",
    "for anf in anfolder:\n",
    "    anf1 = r'DIRECTORY_WORDS' + anf\n",
    "    param1_list = []\n",
    "    param1_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if row['POS'] == 'S':\n",
    "                if row['Word'] not in param1_list:\n",
    "                    param1_list.append(row['Word'])\n",
    "                    param1_score += 1\n",
    "            if param1_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 1, \"Noun\", param1_score, param1_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "#pronoun\n",
    "for anf in anfolder:\n",
    "    anf1 = r'DIRECTORY_WORDS' + anf\n",
    "    param1_list = []\n",
    "    param1_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if row['POS'] == 'SPRO':\n",
    "                if row['Word'] not in param1_list:\n",
    "                    param1_list.append(row['Word'])\n",
    "                    param1_score += 1\n",
    "            if param1_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 2, \"Pronoun\", param1_score, param1_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "#modifiers\n",
    "for anf in anfolder:\n",
    "    anf1 = r'DIRECTORY_WORDS' + anf\n",
    "    param1_list = []\n",
    "    param1_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if row['POS'] == 'A' or row['POS'] == 'APRO' or row['POS'] == 'ANUM':\n",
    "                if row['Word'] not in param1_list:\n",
    "                    param1_list.append(row['Word'])\n",
    "                    param1_score += 1\n",
    "            if param1_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 3, \"Modifiers\", param1_score, param1_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "repanlist = os.listdir(r'DIRECTORY_REPLANALYSIS')\n",
    "\n",
    "for anf in repanlist:\n",
    "    anf1 = r'DIRECTORY_REPLANALYSIS' + anf\n",
    "    param3_list = []\n",
    "    param3_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if 'A S' in row['POS'] or 'APRO S' in row['POS'] or 'ANUM S' in row['POS']:\n",
    "                if row['Repl'] not in param3_list:\n",
    "                    param3_list.append(row['Repl'])\n",
    "                    param3_score += 1\n",
    "            if param3_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 4, \"Mod_Phrase\", param3_score, param3_list])\n",
    "\n",
    "\n",
    "#file_writer.writerow([name, age, 3, \"Mod_Phrase\", param3_score, param3_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "#three word\n",
    "for anf in repanlist:\n",
    "    anf1 = r'DIRECTORY_REPLANALYSIS' + anf\n",
    "    param3_list = []\n",
    "    param3_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if 'A A' in row['POS'] or 'APRO A' in row['POS'] or 'ANUM A' in row['POS'] or 'APRO APRO' in row['POS'] or 'APRO ANUM' in row['POS'] or 'ANUM ANUM' in row['POS']:\n",
    "                if row['Repl'] not in param3_list:\n",
    "                    param3_list.append(row['Repl'])\n",
    "                    param3_score += 1\n",
    "            if param3_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 5, \"Three_Phrase\", param3_score, param3_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "for anf in anfolder:\n",
    "    anf1 = r'DIRECTORY_WORDS' + anf\n",
    "    param2_list = []\n",
    "    param2_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if row['POS'] == 'S' and 'мн' in row['Grammar']:\n",
    "                if row['Word'] not in param2_list:\n",
    "                    param2_list.append(row['Word'])\n",
    "                    param2_score += 1\n",
    "            if param2_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 7, \"Number\", param2_score, param2_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "#upr\n",
    "for anf in repanlist:\n",
    "    anf1 = r'DIRECTORY_REPLANALYSIS' + anf\n",
    "    param3_list = []\n",
    "    param3_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if 'S PR S' in row['POS'] or ('S S' in row['POS'] and ('род' in row['Grammar'] or 'дат' in row['Grammar'])) or 'A PR S' in row['POS'] or 'NUM S' in row['POS'] or ('A S' in row['POS'] and ('род' in row['Grammar'] or 'дат' in row['Grammar'] or 'твор' in row['Grammar'])):\n",
    "                if row['Repl'] not in param3_list:\n",
    "                    param3_list.append(row['Repl'])\n",
    "                    param3_score += 1\n",
    "            if param3_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 8, \"Comand\", param3_score, param3_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [],
   "source": [
    "#prim\n",
    "for anf in repanlist:\n",
    "    anf1 = r'DIRECTORY_REPLANALYSIS' + anf\n",
    "    param3_list = []\n",
    "    param3_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if ('S V' in row['POS'] and 'инф' in row['Grammar']) or ('S A' in row['POS'] and ('срав' in row['Grammar'])) or 'S ADV' in row['POS']:\n",
    "                if row['Repl'] not in param3_list:\n",
    "                    param3_list.append(row['Repl'])\n",
    "                    param3_score += 1\n",
    "            if param3_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 9, \"Prim\", param3_score, param3_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "#prep word\n",
    "for anf in repanlist:\n",
    "    anf1 = r'DIRECTORY_REPLANALYSIS' + anf\n",
    "    param3_list = []\n",
    "    param3_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if 'PR S' in row['POS']:\n",
    "                if row['Repl'] not in param3_list:\n",
    "                    param3_list.append(row['Repl'])\n",
    "                    param3_score += 1\n",
    "            if param3_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 10, \"Pred_Phrase\", param3_score, param3_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "#case\n",
    "for anf in anfolder:\n",
    "    anf1 = r'DIRECTORY_WORDS' + anf\n",
    "    param2_list = []\n",
    "    param2_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if (row['POS'] == 'S' or row['POS'] == 'A' or row['POS'] == 'ANUM' or row['POS'] == 'SPRO') and ('род' in row['Grammar'] or 'дат' in row['Grammar'] or 'твор' in row['Grammar'] or 'пр' in row['Grammar'] or 'вин' in row['Grammar']):\n",
    "                if row['Word'] not in param2_list:\n",
    "                    param2_list.append(row['Word'])\n",
    "                    param2_score += 1\n",
    "            if param2_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 11, \"Case\", param2_score, param2_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "#rare forms\n",
    "for anf in anfolder:\n",
    "    anf1 = r'DIRECTORY_WORDS' + anf\n",
    "    param2_list = []\n",
    "    param2_score = 0\n",
    "    with open(anf1, 'r', encoding='utf-8') as r_file:\n",
    "    # Создаем объект reader, указываем символ-разделитель \",\"\n",
    "        file_reader = csv.DictReader(r_file, delimiter = \"\\t\")\n",
    "        for row in file_reader:\n",
    "            name = row['Child_ID']\n",
    "            age = row[\"Age\"]\n",
    "            if ((row['POS'] == 'S') and ('парт' in row['Grammar'] or 'местн' in row['Grammar'])) or (('пут' in row['Word'] or 'брем' in row['Word'] or 'врем' in row['Word'] or 'стрем' in row['Word'] or 'им' in row['Word'] or 'плем' in row['Word']) and ('им' not in row['Grammar'])):\n",
    "                if row['Word'] not in param2_list:\n",
    "                    param2_list.append(row['Word'])\n",
    "                    param2_score += 1\n",
    "            if param2_score == 2:\n",
    "                break\n",
    "    file_writer.writerow([name, age, 12, \"Rare forms\", param2_score, param2_list])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "f2.close()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.11"
  },
  "orig_nbformat": 4,
  "vscode": {
   "interpreter": {
    "hash": "b2e5af41db96b60e41b7cfcc5fd31f7b3dff55bcb294ba9a0d1a7f47b88aed29"
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
